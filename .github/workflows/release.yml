name: Deploy

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Required tools
        run: cargo install cargo-deny && rustup component add clippy
      - name: Build
        run: cargo build --release --verbose
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --verbose
      - name: Security audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: License check
        run: cargo deny -L debug --all-features --locked check
      - name: Copy to ouput directory
        shell: bash
        run: mkdir -p output-win && cp target/release/qt-ts-tools.exe output-win/.
      - uses: actions/upload-artifact@v4
        with:
          name: binary-win-artifact
          path: output-win

  ubuntu:
    name: Build Ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Required tools
        run: cargo install cargo-deny && rustup component add clippy
      - name: Build
        run: cargo build --release --verbose
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --verbose
      - name: Security audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: License check
        run: cargo deny -L debug --all-features --locked check
      - name: Copy to ouput directory
        run: mkdir -p output-ub && cp target/release/qt-ts-tools output-ub/qt-ts-tools-linux
      - uses: actions/upload-artifact@v4
        with:
          name: binary-ub-artifact
          path: output-ub

  ubuntu-arm:
    name: Build Ubuntu ARM
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Required tools
        run: cargo install cargo-deny && rustup component add clippy
      - name: Build
        run: cargo build --release --verbose
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --verbose
      - name: Security audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: License check
        run: cargo deny -L debug --all-features --locked check
      - name: Copy to ouput directory
        run: mkdir -p output-ub && cp target/release/qt-ts-tools output-ub/qt-ts-tools-linux-arm
      - uses: actions/upload-artifact@v4
        with:
          name: binary-ub-arm-artifact
          path: output-ub-arm

  macos:
    name: Build MacOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Required tools
        run: cargo install cargo-deny && rustup component add clippy
      - name: Build
        run: cargo build --release --verbose
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: cargo test --verbose
      - name: Security audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: License check
        run: cargo deny -L debug --all-features --locked check
      - name: Copy to ouput directory
        run: mkdir -p output-mac && cp target/release/qt-ts-tools output-mac/qt-ts-tools-macos
      - uses: actions/upload-artifact@v4
        with:
          name: binary-mac-artifact
          path: output-mac

  create-release:
    name: Create the release
    runs-on: ubuntu-latest
    needs: [windows, ubuntu, ubuntu-arm, macos]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Retrieve Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binary-win-artifact
          path: output-win
      - name: Retrieve Mac build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binary-mac-artifact
          path: output-mac
      - name: Retrieve Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binary-ub-artifact
          path: output-ub
      - name: Retrieve Linux Arm build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binary-ub-arm-artifact
          path: output-ub-arm
      - name: Package archives
        run: |
          mkdir qt-ts-tools-windows-${{ env.VERSION }}
          mkdir qt-ts-tools-linux-${{ env.VERSION }}
          mkdir qt-ts-tools-linux-arm-${{ env.VERSION }}
          mkdir qt-ts-tools-macos-${{ env.VERSION }}
          
          cp LICENSE-MIT LICENSE-APACHE qt-ts-tools-windows-${{ env.VERSION }}/.
          cp LICENSE-MIT LICENSE-APACHE qt-ts-tools-linux-${{ env.VERSION }}/.
          cp LICENSE-MIT LICENSE-APACHE qt-ts-tools-linux-arm-${{ env.VERSION }}/.
          cp LICENSE-MIT LICENSE-APACHE qt-ts-tools-macos-${{ env.VERSION }}/.
          
          cp output-win/qt-ts-tools.exe qt-ts-tools-windows-${{ env.VERSION }}/.
          cp output-ub/qt-ts-tools-linux qt-ts-tools-linux-${{ env.VERSION }}/qt-ts-tools
          cp output-ub-arm/qt-ts-tools-linux-arm qt-ts-tools-linux-arm${{ env.VERSION }}/qt-ts-tools
          cp output-mac/qt-ts-tools-macos qt-ts-tools-macos-${{ env.VERSION }}/qt-ts-tools
          
          7z a "qt-ts-tools-windows-${{ env.VERSION }}-x86.zip" qt-ts-tools-windows-${{ env.VERSION }}
          tar -czf "qt-ts-tools-linux-${{ env.VERSION }}-x86.tar.gz" "qt-ts-tools-linux-${{ env.VERSION }}"
          tar -czf "qt-ts-tools-linux-${{ env.VERSION }}-arm64.tar.gz" "qt-ts-tools-linux-arm-${{ env.VERSION }}"
          tar -czf "qt-ts-tools-macos-${{ env.VERSION }}-aarch64.tar.gz" "qt-ts-tools-macos-${{ env.VERSION }}"
      - name: Create release
        run: |
          w256=$(sha256sum qt-ts-tools-windows-${{ env.VERSION }}-x86.zip)
          l256=$(sha256sum qt-ts-tools-linux-${{ env.VERSION }}-x86.tar.gz)
          larm256=$(sha256sum qt-ts-tools-linux-${{ env.VERSION }}-arm64.tar.gz)
          m256=$(sha256sum qt-ts-tools-macos-${{ env.VERSION }}-aarch64.tar.gz)
          
          git fetch -a
          previous_tag=$(git describe --abbrev=0 --tags ${{ env.VERSION }}^)
          changes="$(cat CHANGELOG.md | awk '/^## /{block++} {if (block==1) {print}}')"
          echo "$changes" > CHANGES.md
          echo "
          " >> CHANGES.md
          echo "See all changes: [$previous_tag .. ${{ env.VERSION }}](https://github.com/mrtryhard/qt-ts-tools/compare/$previous_tag...${{ env.VERSION }})  
          " >> CHANGES.md
          echo "### Checksums" >> CHANGES.md
          echo "
          " >> CHANGES.md
          echo "All checksums are in sha256  " >> CHANGES.md
          echo "
          " >> CHANGES.md
          echo "Windows: \`$w256\`  " >> CHANGES.md
          echo "
          "
          echo "Linux x86: \`$l256\`  " >> CHANGES.md
          echo "
          "
          echo "Linux arm64: \`$larm256\`  " >> CHANGES.md
          echo "
          "
          echo "MacOS: \`$m256\`  " >> CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGES.md
          files: |
            qt-ts-tools-windows-${{ env.VERSION }}-x86.zip
            qt-ts-tools-linux-${{ env.VERSION }}-x86.tar.gz
            qt-ts-tools-linux-${{ env.VERSION }}-arm64.tar.gz
            qt-ts-tools-macos-${{ env.VERSION }}-aarch64.tar.gz
